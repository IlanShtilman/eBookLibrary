@model Book
<div class="ordered-books-container">
    <div class="container">
        <div class="book-navigation">
            @if (ViewBag.PrevBookId != null)
            {
                <a asp-action="ViewBook" asp-route-id="@ViewBag.PrevBookId" class="nav-link">← Previous Book</a>
            }
            @if (ViewBag.Role == 1)
            {
                <button id="deleteBookBtn" class="btn btn-danger">Delete Book</button>
            }
            <a asp-action="Index" asp-controller="Home" class="btn btn-primary">Return Home</a>
            <a asp-action="Store" asp-controller="Book" class="btn btn-primary">Return To Store</a>
            @if (ViewBag.NextBookId != null)
            {
                <a asp-action="ViewBook" asp-route-id="@ViewBag.NextBookId" class="nav-link">Next Book →</a>
            }
        </div>

        <div class="book-content-wrapper">
            <div class="book-cover">
                <img src="@(string.IsNullOrEmpty(@Model.ImageUrl)
                              ? "/images/book-placeholder.jpg"
                              : (@Model.ImageUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase)
                                  ? @Model.ImageUrl
                                  : $"/images/Bookcovers/{@Model.ImageUrl}"))"
                     alt="@Model.Title Cover"
                     class="cover-image" />
            </div>

            <div class="book-details">
                <h2 class="ordered-books-title">@Model.Title</h2>
                <div class="book-info">
                    <p><strong>Author:</strong> @Model.Author</p>
                    <p><strong>Genre:</strong> @Model.Genre</p>
                    <p><strong>Publisher:</strong> @Model.Publisher</p>
                    <p><strong>Published:</strong> @Model.PublishYear</p>

                    <!-- Price information with admin controls -->
                    @if (ViewBag.Role == 1)
                    {
                        <div class="admin-price-controls">
                            <div class="price-group">
                                <label>Buy Price:</label>
                                <input type="number"
                                       id="buyPrice"
                                       class="price-input"
                                       value="@Model.BuyPrice"
                                       step="0.01"
                                       min="0" />
                                <button onclick="updatePrice('buy')" class="update-btn">Update</button>
                            </div>

                            <div class="price-group">
                                <label>Borrow Price:</label>
                                <input type="number"
                                       id="borrowPrice"
                                       class="price-input"
                                       value="@Model.BorrowPrice"
                                       step="0.01"
                                       min="0" />
                                <button onclick="updatePrice('borrow')" class="update-btn">Update</button>
                            </div>

                            <div class="price-group">
                                <label>Discount Price:</label>
                                <input type="number"
                                       id="discountPrice"
                                       class="price-input"
                                       value="@(Model.DiscountedBuyPrice ?? Model.BuyPrice)"
                                       step="0.01"
                                       min="0" />
                                <button onclick="setDiscount()" class="update-btn">Set Discount</button>
                                @if (Model.DiscountedBuyPrice.HasValue)
                                {
                                    <button onclick="removeDiscount()" class="remove-discount-btn">Remove Discount</button>
                                    <p class="discount-dates">
                                        Discount period: @Model.DiscountStartDate?.ToString("dd/MM/yyyy") - @Model.DiscountEndDate?.ToString("dd/MM/yyyy")
                                    </p>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <p><strong>Buy Price:</strong> $@Model.BuyPrice.ToString("F2")</p>
                        @if (Model.DiscountedBuyPrice.HasValue)
                        {
                            <p><strong>Discounted Price:</strong> $@Model.DiscountedBuyPrice.Value.ToString("F2")</p>
                        }
                        <p><strong>Borrow Price:</strong> $@Model.BorrowPrice.ToString("F2")</p>
                    }
                    <p><strong>@Model.AvailableCopies Borrow copies available</strong></p>
                </div>
            </div>
        </div>
        <div class="reviews-section">
            <h3>Reviews</h3>
            @{
                var reviews = ViewBag.Reviews as IEnumerable<dynamic>;
                if (reviews == null || !reviews.Any())
                {
                    <p class="no-reviews">No reviews yet. Be the first to review this book!</p>
                }
                else
                {
                    foreach (var review in reviews)
                    {
                        <div class="review-item">
                            <div class="review-header">
                                <h4>@review.Title</h4>
                                <div class="rating">
                                    @for (int i = 0; i < review.Rating; i++)
                                    {
                                        <span class="star">★</span>
                                    }
                                    @for (int i = review.Rating; i < 5; i++)
                                    {
                                        <span class="star empty">☆</span>
                                    }
                                </div>
                            </div>
                            <p class="review-meta">By @review.User.FirstName @review.User.LastName on @review.CreatedAt.ToString("dd/MM/yyyy")</p>
                            <p class="review-content">@review.Content</p>
                        </div>
                    }
                }
            }
        </div>
        <div class="waiting-list-section">
            <h2><i class="fas fa-clock"></i> Waiting List</h2>
            @{
                var waitingList = ViewBag.WaitingList as IEnumerable<dynamic>;
                if (waitingList == null || !waitingList.Any())
                {
                    <div class="empty-state">
                        <i class="fas fa-hourglass"></i>
                        <p>No waiting list for this book</p>
                    </div>
                }
                else
                {
                    <div class="waitlist-content">
                        @foreach (var entry in waitingList)
                        {
                            <div class="waitlist-item">
                                <div class="item-details">
                                    <div class="queue-position">
                                        <span class="position-number">#@entry.Position</span>
                                        <span class="in-line">in line</span>
                                    </div>
                                    <div class="user-info">
                                        <p class="waitlist-name">@entry.FirstName @entry.LastName</p>
                                        <p class="join-date">Joined on @entry.JoinDate.ToString("MM/dd/yyyy")</p>
                                    </div>
                                </div>
                                @if (ViewBag.Role == 1)
                                {
                                    <button type="button"
                                            class="remove-btn"
                                            onclick="removeFromWaitingList(@entry.WaitingListId, @Model.BookId)"
                                            title="Remove from waiting list">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>
@if (ViewBag.Role == 1)
{
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this book? This action cannot be undone and will also delete all associated reviews.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" id="cancelButton">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}
@section Styles {
    <link rel="stylesheet" href="~/css/viewbook.css" />
}
@section Scripts {
    <script>
        //////
        async function updatePrice(type) {
            const bookId = @Model.BookId;
            const price = type === 'buy'
                ? document.getElementById('buyPrice').value
                : document.getElementById('borrowPrice').value;
            try {
                const response = await fetch(`/Book/UpdatePrice?bookId=${bookId}&type=${type}&price=${price}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        bookId: bookId,
                        type: type,
                        price: parseFloat(price)
                    })
                });
                if (response.ok) {
                    window.location.reload();
                } else {
                    const errorData = await response.text();
                    alert('Failed to update price: ' + errorData);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while updating the price');
            }
        }
        async function setDiscount() {
            const bookId = @Model.BookId;
            const discountPrice = document.getElementById('discountPrice').value;
            try {
                const response = await fetch(`/Book/SetDiscount?bookId=${bookId}&discountPrice=${discountPrice}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        bookId: bookId,
                        discountPrice: parseFloat(discountPrice)
                    })
                });
                if (response.ok) {
                    window.location.reload();
                } else {
                    const errorData = await response.text();
                    alert('Failed to set discount: ' + errorData);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while setting the discount');
            }
        }
        async function removeDiscount() {
            const bookId = @Model.BookId;
            try {
                const response = await fetch(`/Book/RemoveDiscount?bookId=${bookId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        bookId: bookId
                    })
                });
                if (response.ok) {
                    window.location.reload();
                } else {
                    const errorData = await response.text();
                    alert('Failed to remove discount: ' + errorData);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while removing the discount');
            }
        }
        
        async function removeFromWaitingList(waitingListId, bookId) {
            if (confirm('Are you sure you want to remove this user from the waiting list?')) {
                try {
                    const response = await fetch('/Book/AdminRemoveFromWaitingList', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            waitingListId: waitingListId,
                            bookId: bookId
                        })
                    });
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            window.location.reload();
                        } else {
                            alert('Failed to remove user: ' + result.message);
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('Server response:', errorText);
                        alert('Failed to remove user from waiting list');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while removing user from waiting list');
                }
            }
        }
    
    
    </script>
    @if (ViewBag.Role == 1)
    {
        <script type="text/javascript">
            document.addEventListener('DOMContentLoaded', function() {
                // Using vanilla JavaScript as a fallback in case jQuery isn't loaded
                var deleteBtn = document.getElementById('deleteBookBtn');
                var confirmBtn = document.getElementById('confirmDelete');
                var modal = document.getElementById('deleteConfirmModal');
                var cancelBtn = document.getElementById('cancelButton');

                if (deleteBtn) {
                    deleteBtn.addEventListener('click', function() {
                        // First try with jQuery if available
                        if (typeof $ !== 'undefined') {
                            $('#deleteConfirmModal').modal('show');
                        } else {
                            // Fallback to Bootstrap's native JavaScript
                            var bootstrapModal = new bootstrap.Modal(modal);
                            bootstrapModal.show();
                        }
                    });
                }
                if (confirmBtn) {
                    confirmBtn.addEventListener('click', function() {
                        fetch('@Url.Action("DeleteBook", "Book", new { id = Model.BookId })', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.success) {
                                    window.location.href = '/Book/ViewBook';
                                } else {
                                    alert("Error deleting book: " + result.message);
                                }
                            })
                            .catch(error => {
                                alert("An error occurred while deleting the book.");
                                console.error('Error:', error);
                            });
                    });
                }
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function() {
                        // First try with jQuery if available
                        if (typeof $ !== 'undefined') {
                            $('#deleteConfirmModal').modal('hide');
                        } else {
                            // Fallback to Bootstrap's native JavaScript
                            var bootstrapModal = bootstrap.Modal.getInstance(modal);
                            if (bootstrapModal) {
                                bootstrapModal.hide();
                            }
                        }
                    });
                }
            });
        </script>
    }
}


@*
           LAST CODE:::::         
@model Book
<div class="ordered-books-container">
    <div class="container">
        <div class="book-navigation">
            @if (ViewBag.PrevBookId != null)
            {
                <a asp-action="ViewBook" asp-route-id="@ViewBag.PrevBookId" class="nav-link">← Previous Book</a>
            }
            @if (ViewBag.Role == 1)
            {
                <button id="deleteBookBtn" class="btn btn-danger">Delete Book</button>
            }
            <a asp-action="Index" asp-controller="Home" class="btn btn-primary">Return Home</a>
            <a asp-action="Store" asp-controller="Book" class="btn btn-primary">Return To Store</a>
            @if (ViewBag.NextBookId != null)
            {
                <a asp-action="ViewBook" asp-route-id="@ViewBag.NextBookId" class="nav-link">Next Book →</a>
            }
        </div>
        <div class="book-details">
            <h2 class="ordered-books-title">@Model.Title</h2>
            <div class="book-info">
                <p><strong>Author:</strong> @Model.Author</p>
                <p><strong>Genre:</strong> @Model.Genre</p>
                <p><strong>Publisher:</strong> @Model.Publisher</p>
                <p><strong>Published:</strong> @Model.PublishYear</p>
                <p><strong>Buy Price:</strong> $@Model.BuyPrice.ToString("F2")</p>
                <p><strong>Borrow Price:</strong> $@Model.BorrowPrice.ToString("F2")</p>
            </div>
        </div>
        <div class="reviews-section">
            <h3>Reviews</h3>
            @{
                var reviews = ViewBag.Reviews as IEnumerable<dynamic>;
                if (reviews == null || !reviews.Any())
                {
                    <p class="no-reviews">No reviews yet. Be the first to review this book!</p>
                }
                else
                {
                    foreach (var review in reviews)
                    {
                        <div class="review-item">
                            <div class="review-header">
                                <h4>@review.Title</h4>
                                <div class="rating">
                                    @for (int i = 0; i < review.Rating; i++)
                                    {
                                        <span class="star">★</span>
                                    }
                                    @for (int i = review.Rating; i < 5; i++)
                                    {
                                        <span class="star empty">☆</span>
                                    }
                                </div>
                            </div>
                            <p class="review-meta">By @review.User.FirstName @review.User.LastName on @review.CreatedAt.ToString("dd/MM/yyyy")</p>
                            <p class="review-content">@review.Content</p>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>
@if (ViewBag.Role == 1)
{
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this book? This action cannot be undone and will also delete all associated reviews.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" id="cancelButton">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}
@section Styles {
    <link rel="stylesheet" href="~/css/ordered-books.css" />
    <link rel="stylesheet" href="~/css/review.css" />
}
@section Scripts {
    @if (ViewBag.Role == 1)
    {
        <script type="text/javascript">
            document.addEventListener('DOMContentLoaded', function() {
                // Using vanilla JavaScript as a fallback in case jQuery isn't loaded
                var deleteBtn = document.getElementById('deleteBookBtn');
                var confirmBtn = document.getElementById('confirmDelete');
                var modal = document.getElementById('deleteConfirmModal');
                var cancelBtn = document.getElementById('cancelButton');
                
                if (deleteBtn) {
                    deleteBtn.addEventListener('click', function() {
                        // First try with jQuery if available
                        if (typeof $ !== 'undefined') {
                            $('#deleteConfirmModal').modal('show');
                        } else {
                            // Fallback to Bootstrap's native JavaScript
                            var bootstrapModal = new bootstrap.Modal(modal);
                            bootstrapModal.show();
                        }
                    });
                }
                if (confirmBtn) {
                    confirmBtn.addEventListener('click', function() {
                        fetch('@Url.Action("DeleteBook", "Book", new { id = Model.BookId })', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.success) {
                                    window.location.href = '/Book/ViewBook';
                                } else {
                                    alert("Error deleting book: " + result.message);
                                }
                            })
                            .catch(error => {
                                alert("An error occurred while deleting the book.");
                                console.error('Error:', error);
                            });
                    });
                }
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function() {
                        // First try with jQuery if available
                        if (typeof $ !== 'undefined') {
                            $('#deleteConfirmModal').modal('hide');
                        } else {
                            // Fallback to Bootstrap's native JavaScript
                            var bootstrapModal = bootstrap.Modal.getInstance(modal);
                            if (bootstrapModal) {
                                bootstrapModal.hide();
                            }
                        }
                    });
                }
            });
        </script>
    }
}

*@